import React, { useState, useCallback } from "react";
import { useNavigate, Link } from "react-router-dom";
import API from "../api/axios";
import {
  UserPlusIcon,
  UserIcon,
  EnvelopeIcon,
  LockClosedIcon,
  PhoneIcon,
  MapPinIcon,
  BriefcaseIcon
} from '@heroicons/react/24/outline';
import toast from 'react-hot-toast';
import Loading from '../components/Loading';

// Form input component
const FormInput = React.memo(({ 
  field, 
  label, 
  type = "text", 
  placeholder, 
  icon: Icon, 
  required = false, 
  showToggle = false,
  value,
  error,
  onChange,
  onToggle,
  showPassword
}) => {
  const handleChange = useCallback((e) => {
    onChange(field, e.target.value);
  }, [field, onChange]);

  return (
    <div className="mb-4">
      <label htmlFor={field} className="block text-sm font-medium text-gray-700 mb-1">
        {label} {required && <span className="text-red-500">*</span>}
      </label>
      <div className="relative">
        {Icon && (
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Icon className="h-5 w-5 text-gray-400" />
          </div>
        )}
        <input
          id={field}
          name={field}
          type={type}
          placeholder={placeholder}
          className={`input-field ${Icon ? 'pl-10' : ''} ${error ? 'border-red-500' : ''}`}
          value={value}
          onChange={handleChange}
          required={required}
        />
      </div>
      {error && (
        <p className="mt-1 text-sm text-red-600">{error}</p>
      )}
    </div>
  );
});

FormInput.displayName = 'FormInput';

// Main Register component
export default function Register() {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
    role: "",
    phone: "",
    address: ""
  });

  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const [currentStep, setCurrentStep] = useState(1);

  const handleInputChange = useCallback((field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Clear error when field is modified
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ""
      }));
    }
  }, [errors]);

  const validateStep = (step) => {
    const newErrors = {};
    
    if (step === 1) {
      if (!formData.name.trim()) newErrors.name = "Name is required";
      if (!formData.email.trim()) {
        newErrors.email = "Email is required";
      } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
        newErrors.email = "Please enter a valid email";
      }
      if (!formData.password) {
        newErrors.password = "Password is required";
      } else if (formData.password.length < 6) {
        newErrors.password = "Password must be at least 6 characters";
      }
      if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = "Passwords don't match";
      }
    }
    
    if (step === 2) {
      if (!formData.role) newErrors.role = "Please select a role";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(2);
    } else {
      toast.error("Please fix the errors below");
    }
  };

  const handleBack = () => {
    setCurrentStep(1);
    setErrors({});
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateStep(currentStep)) {
      toast.error("Please fix the errors below");
      return;
    }
    
    setLoading(true);
    try {
      const { confirmPassword, ...submitData } = formData;
      await API.post("/auth/register", submitData);
      toast.success("Registration submitted successfully! Please wait for admin approval.");
      setTimeout(() => navigate("/login"), 2000);
    } catch (err) {
      console.error('Registration error:', err);
      const errorMessage = err.response?.data?.error || "Registration failed. Please try again.";
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loading size="lg" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <div className="flex justify-center">
          <UserPlusIcon className="h-12 w-12 text-blue-600" />
        </div>
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Create your account
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          Or{" "}
          <Link to="/login" className="font-medium text-blue-600 hover:text-blue-500">
            sign in to your account
          </Link>
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          <form className="space-y-6" onSubmit={handleSubmit}>
            {currentStep === 1 ? (
              <>
                <FormInput
                  field="name"
                  label="Full Name"
                  placeholder="Enter your full name"
                  icon={UserIcon}
                  required
                  value={formData.name}
                  error={errors.name}
                  onChange={handleInputChange}
                />

                <FormInput
                  field="email"
                  label="Email"
                  type="email"
                  placeholder="Enter your email"
                  icon={EnvelopeIcon}
                  required
                  value={formData.email}
                  error={errors.email}
                  onChange={handleInputChange}
                />

                <FormInput
                  field="password"
                  label="Password"
                  type="password"
                  placeholder="Create a password"
                  icon={LockClosedIcon}
                  required
                  value={formData.password}
                  error={errors.password}
                  onChange={handleInputChange}
                />

                <FormInput
                  field="confirmPassword"
                  label="Confirm Password"
                  type="password"
                  placeholder="Confirm your password"
                  icon={LockClosedIcon}
                  required
                  value={formData.confirmPassword}
                  error={errors.confirmPassword}
                  onChange={handleInputChange}
                />

                <button
                  type="button"
                  onClick={handleNext}
                  className="w-full btn-primary"
                >
                  Next
                </button>
              </>
            ) : (
              <>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Role <span className="text-red-500">*</span>
                  </label>
                  <div className="grid grid-cols-2 gap-4">
                    <button
                      type="button"
                      className={`p-4 border rounded-lg flex flex-col items-center justify-center transition-colors ${
                        formData.role === 'CUSTOMER'
                          ? 'border-blue-500 bg-blue-50 text-blue-700'
                          : 'border-gray-200 hover:border-blue-500 hover:bg-blue-50'
                      }`}
                      onClick={() => handleInputChange('role', 'CUSTOMER')}
                    >
                      <UserIcon className="h-6 w-6 mb-2" />
                      <span className="font-medium">Customer</span>
                    </button>
                    <button
                      type="button"
                      className={`p-4 border rounded-lg flex flex-col items-center justify-center transition-colors ${
                        formData.role === 'SUPPLIER'
                          ? 'border-blue-500 bg-blue-50 text-blue-700'
                          : 'border-gray-200 hover:border-blue-500 hover:bg-blue-50'
                      }`}
                      onClick={() => handleInputChange('role', 'SUPPLIER')}
                    >
                      <BriefcaseIcon className="h-6 w-6 mb-2" />
                      <span className="font-medium">Supplier</span>
                    </button>
                  </div>
                  {errors.role && (
                    <p className="mt-1 text-sm text-red-600">{errors.role}</p>
                  )}
                </div>

                <FormInput
                  field="phone"
                  label="Phone Number"
                  placeholder="Enter your phone number"
                  icon={PhoneIcon}
                  value={formData.phone}
                  error={errors.phone}
                  onChange={handleInputChange}
                />

                <FormInput
                  field="address"
                  label="Address"
                  placeholder="Enter your address"
                  icon={MapPinIcon}
                  value={formData.address}
                  error={errors.address}
                  onChange={handleInputChange}
                />

                <div className="flex space-x-4">
                  <button
                    type="button"
                    onClick={handleBack}
                    className="flex-1 btn-secondary"
                  >
                    Back
                  </button>
                  <button
                    type="submit"
                    className="flex-1 btn-primary"
                  >
                    Register
                  </button>
                </div>
              </>
            )}
          </form>
        </div>
      </div>
    </div>
  );
}
